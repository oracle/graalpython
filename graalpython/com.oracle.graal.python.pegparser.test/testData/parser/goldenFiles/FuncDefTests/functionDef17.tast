Input:
------
def test():
  def inner (end):
    def inner_inner():
      print("inner_inner", end=" haha\n")
      print(end)
    inner_inner()
  inner(" baf\n")
test()

Output:
-------
Module[1:0-8:6]
    FunctionDef[1:0-7:17]
        Name:test
        ArgumentsTy[1:0-1:0]
        ---- Function body of test ----
        FunctionDef[2:2-6:17]
            Name:inner
            ArgumentsTy[1:0-1:0]
                Args:
                    ArgTy[2:13-2:16] end
            ---- Function body of inner ----
            FunctionDef[3:4-5:16]
                Name:inner_inner
                ArgumentsTy[1:0-1:0]
                ---- Function body of inner_inner ----
                Call[4:6-4:41]
                    Target: Name[4:6-4:11] Value: "print"
                    Args:
                        CODEPOINTS[4:12-4:25] Value: "inner_inner"
                    KWArgs:
                        KeywordTy[4:27-4:40]
                            end: CODEPOINTS[4:31-4:40] Value: " haha\n"
                Call[5:6-5:16]
                    Target: Name[5:6-5:11] Value: "print"
                    Args:
                        Name[5:12-5:15] Value: "end"
                ---- End of inner_inner function ----
            Call[6:4-6:17]
                Target: Name[6:4-6:15] Value: "inner_inner"
            ---- End of inner function ----
        Call[7:2-7:17]
            Target: Name[7:2-7:7] Value: "inner"
            Args:
                CODEPOINTS[7:8-7:16] Value: " baf\n"
        ---- End of test function ----
    Call[8:0-8:6]
        Target: Name[8:0-8:4] Value: "test"