/*
 * Copyright (c) 2021, 2025, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * The Universal Permissive License (UPL), Version 1.0
 *
 * Subject to the condition set forth below, permission is hereby granted to any
 * person obtaining a copy of this software, associated documentation and/or
 * data (collectively the "Software"), free of charge and under any and all
 * copyright rights in the Software, and any and all patent rights owned or
 * freely licensable by each licensor hereunder covering either (i) the
 * unmodified Software as contributed to or provided by such licensor, or (ii)
 * the Larger Works (as defined below), to deal in both
 *
 * (a) the Software, and
 *
 * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
 * one is included with the Software each a "Larger Work" to which the Software
 * is contributed by such licensors),
 *
 * without restriction, including without limitation the rights to copy, create
 * derivative works of, display, perform, and distribute the Software and make,
 * use, sell, offer for sale, import, export, have made, and have sold the
 * Software and the Larger Work(s), and to sublicense the foregoing rights on
 * either these or other terms.
 *
 * This license is subject to the following condition:
 *
 * The above copyright notice and either this complete permission notice or at a
 * minimum a reference to the UPL must be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.oracle.graal.python.builtins.objects.module;

import com.oracle.graal.python.PythonLanguage;
import com.oracle.graal.python.annotations.PythonOS;

/** GENERATED BY graalpython/com.oracle.graal.python.frozen/freeze_modules.py */
public final class FrozenModules {

    private static final class Map {
        private static final PythonFrozenModule IMPORTLIB__BOOTSTRAP = new PythonFrozenModule("IMPORTLIB__BOOTSTRAP", "importlib._bootstrap", false);
        private static final PythonFrozenModule IMPORTLIB__BOOTSTRAP_EXTERNAL = new PythonFrozenModule("IMPORTLIB__BOOTSTRAP_EXTERNAL", "importlib._bootstrap_external", false);
        private static final PythonFrozenModule ZIPIMPORT = new PythonFrozenModule("ZIPIMPORT", "zipimport", false);
        private static final PythonFrozenModule ABC = new PythonFrozenModule("ABC", "abc", false);
        private static final PythonFrozenModule CODECS = new PythonFrozenModule("CODECS", "codecs", false);
        private static final PythonFrozenModule ENCODINGS = new PythonFrozenModule("ENCODINGS", "encodings", true);
        private static final PythonFrozenModule ENCODINGS_ALIASES = new PythonFrozenModule("ENCODINGS_ALIASES", "encodings.aliases", false);
        private static final PythonFrozenModule IO = new PythonFrozenModule("IO", "io", false);
        private static final PythonFrozenModule _PY_ABC = new PythonFrozenModule("_PY_ABC", "_py_abc", false);
        private static final PythonFrozenModule _WEAKREFSET = new PythonFrozenModule("_WEAKREFSET", "_weakrefset", false);
        private static final PythonFrozenModule TYPES = new PythonFrozenModule("TYPES", "types", false);
        private static final PythonFrozenModule ENUM = new PythonFrozenModule("ENUM", "enum", false);
        private static final PythonFrozenModule OPERATOR = new PythonFrozenModule("OPERATOR", "operator", false);
        private static final PythonFrozenModule KEYWORD = new PythonFrozenModule("KEYWORD", "keyword", false);
        private static final PythonFrozenModule HEAPQ = new PythonFrozenModule("HEAPQ", "heapq", false);
        private static final PythonFrozenModule REPRLIB = new PythonFrozenModule("REPRLIB", "reprlib", false);
        private static final PythonFrozenModule COLLECTIONS = new PythonFrozenModule("COLLECTIONS", "collections", true);
        private static final PythonFrozenModule COLLECTIONS_ABC = new PythonFrozenModule("COLLECTIONS_ABC", "collections.abc", false);
        private static final PythonFrozenModule FUNCTOOLS = new PythonFrozenModule("FUNCTOOLS", "functools", false);
        private static final PythonFrozenModule COPYREG = new PythonFrozenModule("COPYREG", "copyreg", false);
        private static final PythonFrozenModule RE = new PythonFrozenModule("RE", "re", true);
        private static final PythonFrozenModule RE__CASEFIX = new PythonFrozenModule("RE__CASEFIX", "re._casefix", false);
        private static final PythonFrozenModule RE__COMPILER = new PythonFrozenModule("RE__COMPILER", "re._compiler", false);
        private static final PythonFrozenModule RE__CONSTANTS = new PythonFrozenModule("RE__CONSTANTS", "re._constants", false);
        private static final PythonFrozenModule RE__PARSER = new PythonFrozenModule("RE__PARSER", "re._parser", false);
        private static final PythonFrozenModule LOCALE = new PythonFrozenModule("LOCALE", "locale", false);
        private static final PythonFrozenModule RLCOMPLETER = new PythonFrozenModule("RLCOMPLETER", "rlcompleter", false);
        private static final PythonFrozenModule _COLLECTIONS_ABC = new PythonFrozenModule("_COLLECTIONS_ABC", "_collections_abc", false);
        private static final PythonFrozenModule _SITEBUILTINS = new PythonFrozenModule("_SITEBUILTINS", "_sitebuiltins", false);
        private static final PythonFrozenModule GENERICPATH = new PythonFrozenModule("GENERICPATH", "genericpath", false);
        private static final PythonFrozenModule NTPATH = new PythonFrozenModule("NTPATH", "ntpath", false);
        private static final PythonFrozenModule POSIXPATH = new PythonFrozenModule("POSIXPATH", "posixpath", false);
        private static final PythonFrozenModule OS = new PythonFrozenModule("OS", "os", false);
        private static final PythonFrozenModule SITE = new PythonFrozenModule("SITE", "site", false);
        private static final PythonFrozenModule STAT = new PythonFrozenModule("STAT", "stat", false);
        private static final PythonFrozenModule DATETIME = new PythonFrozenModule("DATETIME", "datetime", false);
        private static final PythonFrozenModule CONTEXTLIB = new PythonFrozenModule("CONTEXTLIB", "contextlib", false);
        private static final PythonFrozenModule WARNINGS = new PythonFrozenModule("WARNINGS", "warnings", false);
        private static final PythonFrozenModule INSPECT = new PythonFrozenModule("INSPECT", "inspect", false);
        private static final PythonFrozenModule IMPORTLIB_UTIL = new PythonFrozenModule("IMPORTLIB_UTIL", "importlib.util", false);
        private static final PythonFrozenModule IMPORTLIB_MACHINERY = new PythonFrozenModule("IMPORTLIB_MACHINERY", "importlib.machinery", false);
        private static final PythonFrozenModule RUNPY = new PythonFrozenModule("RUNPY", "runpy", false);
        private static final PythonFrozenModule __HELLO__ = new PythonFrozenModule("__HELLO__", "__hello__", false);
        private static final PythonFrozenModule __PHELLO__ = new PythonFrozenModule("__PHELLO__", "__phello__", true);
        private static final PythonFrozenModule __PHELLO___HAM = new PythonFrozenModule("__PHELLO___HAM", "__phello__.ham", true);
        private static final PythonFrozenModule __PHELLO___HAM_EGGS = new PythonFrozenModule("__PHELLO___HAM_EGGS", "__phello__.ham.eggs", false);
        private static final PythonFrozenModule __PHELLO___SPAM = new PythonFrozenModule("__PHELLO___SPAM", "__phello__.spam", false);
        private static final PythonFrozenModule FROZEN_ONLY = new PythonFrozenModule("FROZEN_ONLY", null, false);
        private static final PythonFrozenModule POLYGLOT_ARROW = new PythonFrozenModule("POLYGLOT_ARROW", null, false);
        private static final PythonFrozenModule _SYSCONFIGDATA = new PythonFrozenModule("_SYSCONFIGDATA", null, false);
        private static final PythonFrozenModule _POLYGLOT = new PythonFrozenModule("_POLYGLOT", null, false);
        private static final PythonFrozenModule _POLYGLOT_DATETIME = new PythonFrozenModule("_POLYGLOT_DATETIME", null, false);
        private static final PythonFrozenModule _POLYGLOT_TIME = new PythonFrozenModule("_POLYGLOT_TIME", null, false);
        private static final PythonFrozenModule GRAALPY___GRAALPYTHON__ = new PythonFrozenModule("GRAALPY___GRAALPYTHON__", null, false);
        private static final PythonFrozenModule GRAALPY__SRE = new PythonFrozenModule("GRAALPY__SRE", null, false);
        private static final PythonFrozenModule GRAALPY__SYSCONFIG = new PythonFrozenModule("GRAALPY__SYSCONFIG", null, false);
        private static final PythonFrozenModule GRAALPY__WEAKREF = new PythonFrozenModule("GRAALPY__WEAKREF", null, false);
        private static final PythonFrozenModule GRAALPY_JAVA = new PythonFrozenModule("GRAALPY_JAVA", null, false);
        private static final PythonFrozenModule GRAALPY_PIP_HOOK = new PythonFrozenModule("GRAALPY_PIP_HOOK", null, false);
        private static final PythonFrozenModule GRAALPY_UNICODEDATA = new PythonFrozenModule("GRAALPY_UNICODEDATA", null, false);
        private static final PythonFrozenModule GRAALPY__NT = new PythonFrozenModule("GRAALPY__NT", null, false);
    }

    public static final PythonFrozenModule lookup(String name) {
        switch (name) {
            case "_frozen_importlib":
                return Map.IMPORTLIB__BOOTSTRAP;
            case "_frozen_importlib_external":
                return Map.IMPORTLIB__BOOTSTRAP_EXTERNAL;
            case "zipimport":
                return Map.ZIPIMPORT;
            case "abc":
                return Map.ABC;
            case "codecs":
                return Map.CODECS;
            case "encodings":
                return Map.ENCODINGS;
            case "encodings.aliases":
                return Map.ENCODINGS_ALIASES;
            case "io":
                return Map.IO;
            case "_py_abc":
                return Map._PY_ABC;
            case "_weakrefset":
                return Map._WEAKREFSET;
            case "types":
                return Map.TYPES;
            case "enum":
                return Map.ENUM;
            case "operator":
                return Map.OPERATOR;
            case "keyword":
                return Map.KEYWORD;
            case "heapq":
                return Map.HEAPQ;
            case "reprlib":
                return Map.REPRLIB;
            case "collections":
                return Map.COLLECTIONS;
            case "collections.__init__":
                return Map.COLLECTIONS.asPackage(false);
            case "collections.abc":
                return Map.COLLECTIONS_ABC;
            case "functools":
                return Map.FUNCTOOLS;
            case "copyreg":
                return Map.COPYREG;
            case "re":
                return Map.RE;
            case "re.__init__":
                return Map.RE.asPackage(false);
            case "re._casefix":
                return Map.RE__CASEFIX;
            case "re._compiler":
                return Map.RE__COMPILER;
            case "re._constants":
                return Map.RE__CONSTANTS;
            case "re._parser":
                return Map.RE__PARSER;
            case "locale":
                return Map.LOCALE;
            case "rlcompleter":
                return Map.RLCOMPLETER;
            case "_collections_abc":
                return Map._COLLECTIONS_ABC;
            case "_sitebuiltins":
                return Map._SITEBUILTINS;
            case "genericpath":
                return Map.GENERICPATH;
            case "ntpath":
                return Map.NTPATH;
            case "posixpath":
                return Map.POSIXPATH;
            case "os.path":
                return PythonLanguage.getPythonOS() != PythonOS.PLATFORM_WIN32 ? Map.POSIXPATH : Map.NTPATH;
            case "os":
                return Map.OS;
            case "site":
                return Map.SITE;
            case "stat":
                return Map.STAT;
            case "datetime":
                return Map.DATETIME;
            case "contextlib":
                return Map.CONTEXTLIB;
            case "warnings":
                return Map.WARNINGS;
            case "inspect":
                return Map.INSPECT;
            case "importlib.util":
                return Map.IMPORTLIB_UTIL;
            case "importlib.machinery":
                return Map.IMPORTLIB_MACHINERY;
            case "runpy":
                return Map.RUNPY;
            case "__hello__":
                return Map.__HELLO__;
            case "__hello_alias__":
                return Map.__HELLO__;
            case "__phello_alias__":
                return Map.__HELLO__.asPackage(true);
            case "__phello_alias__.spam":
                return Map.__HELLO__;
            case "__phello__":
                return Map.__PHELLO__;
            case "__phello__.__init__":
                return Map.__PHELLO__.asPackage(false);
            case "__phello__.ham":
                return Map.__PHELLO___HAM;
            case "__phello__.ham.__init__":
                return Map.__PHELLO___HAM.asPackage(false);
            case "__phello__.ham.eggs":
                return Map.__PHELLO___HAM_EGGS;
            case "__phello__.spam":
                return Map.__PHELLO___SPAM;
            case "__hello_only__":
                return Map.FROZEN_ONLY;
            case "polyglot.arrow":
                return Map.POLYGLOT_ARROW;
            case "_sysconfigdata":
                return Map._SYSCONFIGDATA;
            case "_polyglot":
                return Map._POLYGLOT;
            case "_polyglot_datetime":
                return Map._POLYGLOT_DATETIME;
            case "_polyglot_time":
                return Map._POLYGLOT_TIME;
            case "graalpy.__graalpython__":
                return Map.GRAALPY___GRAALPYTHON__;
            case "graalpy._sre":
                return Map.GRAALPY__SRE;
            case "graalpy._sysconfig":
                return Map.GRAALPY__SYSCONFIG;
            case "graalpy._weakref":
                return Map.GRAALPY__WEAKREF;
            case "graalpy.java":
                return Map.GRAALPY_JAVA;
            case "graalpy.pip_hook":
                return Map.GRAALPY_PIP_HOOK;
            case "graalpy.unicodedata":
                return Map.GRAALPY_UNICODEDATA;
            case "graalpy._nt":
                return Map.GRAALPY__NT;
            default:
                return null;
        }
    }
}
