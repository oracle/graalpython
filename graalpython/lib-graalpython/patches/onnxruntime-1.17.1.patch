diff --git a/cmake/CMakeLists.txt b/cmake/CMakeLists.txt
index 94d650f..31dc0bc 100644
--- a/cmake/CMakeLists.txt
+++ b/cmake/CMakeLists.txt
@@ -54,6 +54,16 @@ set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 enable_testing()
 include(Dart)
 
+# For Linux
+if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error=array-bounds -Wno-error=maybe-uninitialized -Wno-error=uninitialized -Wno-error=restrict -Wno-error=unused-but-set-variable -Wno-error=overloaded-virtual")
+endif()
+
+# For macOS
+if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated")
+endif()
+
 if (NOT CMAKE_BUILD_TYPE)
   message(STATUS "Build type not set - using RelWithDebInfo")
   set(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING "Choose build type: Debug Release RelWithDebInfo MinSizeRel." FORCE)
diff --git a/cmake/deps.txt b/cmake/deps.txt
index ba9c2bb..c2813aa 100644
--- a/cmake/deps.txt
+++ b/cmake/deps.txt
@@ -21,7 +21,9 @@ dlpack;https://github.com/dmlc/dlpack/archive/refs/tags/v0.6.zip;4d565dd2e5b3132
 # it contains changes on top of 3.4.0 which are required to fix build issues.
 # Until the 3.4.1 release this is the best option we have.
 # Issue link: https://gitlab.com/libeigen/eigen/-/issues/2744
-eigen;https://gitlab.com/libeigen/eigen/-/archive/e7248b26a1ed53fa030c5c459f7ea095dfd276ac/eigen-e7248b26a1ed53fa030c5c459f7ea095dfd276ac.zip;be8be39fdbc6e60e94fa7870b280707069b5b81a
+# Moved to github mirror to avoid gitlab issues.
+# Issue link: https://github.com/bazelbuild/bazel-central-registry/issues/4355
+eigen;https://github.com/eigen-mirror/eigen/archive/1d8b82b0740839c0de7f1242a3585e3390ff5f33/eigen-1d8b82b0740839c0de7f1242a3585e3390ff5f33.zip;05b19b49e6fbb91246be711d801160528c135e34
 flatbuffers;https://github.com/google/flatbuffers/archive/refs/tags/v1.12.0.zip;ba0a75fd12dbef8f6557a74e611b7a3d0c5fe7bf
 fp16;https://github.com/Maratyszcza/FP16/archive/0a92994d729ff76a58f692d3028ca1b64b145d91.zip;b985f6985a05a1c03ff1bb71190f66d8f98a1494
 fxdiv;https://github.com/Maratyszcza/FXdiv/archive/63058eff77e11aa15bf531df5dd34395ec3017c8.zip;a5658f4036402dbca7cebee32be57fb8149811e1
diff --git a/onnxruntime_build_backend.py b/onnxruntime_build_backend.py
new file mode 100644
index 0000000..156e70a
--- /dev/null
+++ b/onnxruntime_build_backend.py
@@ -0,0 +1,59 @@
+import os
+import re
+import sys
+import tarfile
+import subprocess
+import tempfile
+import shutil
+from pathlib import Path
+
+
+def build_sdist(sdist_directory, config_settings=None):
+    nv = 'onnxruntime-1.17.1'
+    srcdir = Path(__file__).parent
+    archive_path = Path(sdist_directory) / f'{nv}.tar.gz'
+
+    def tarfilter(info):
+        if re.match(r'\./(?:.git|venv|[^-/]+-venv|dist)', info.name):
+            return None
+        info.name = f'./{nv}/{info.name}'
+        return info
+
+    with tarfile.open(archive_path, 'w:gz') as tar:
+        tar.add('.', filter=tarfilter)
+    return archive_path.name
+
+
+def build_wheel(wheel_directory, config_settings=None, metadata_directory=None):
+    wheel_directory = Path(wheel_directory).absolute()
+    build_type = 'Release'
+    build_dir = Path(f'build/{build_type}')
+    parallel = os.environ.get('CMAKE_BUILD_PARALLEL_LEVEL', os.cpu_count())
+    build_cmd = [
+        sys.executable,
+        'tools/ci_build/build.py',
+        '--build_dir', 'build',
+        '--skip_submodule_sync',
+        '--skip_tests',
+        '--config', build_type,
+        '--enable_pybind',
+        '--parallel', str(parallel),
+    ]
+    if sys.implementation.name == 'graalpy':
+        # The cmake build downloads a bunch of sources that need to be patched
+        subprocess.check_call(build_cmd)
+        marker = build_dir / 'graalpy-patched-marker'
+        if not marker.exists():
+            subprocess.check_call([sys.executable, '-m', 'autopatch_capi', '.'])
+            pybind11_dir = build_dir / '_deps/pybind11_project-src'
+            patches_dir = Path(__graalpython__.core_home) / 'patches'
+            with open(patches_dir / 'pybind11-2.10.1.patch') as f:
+                subprocess.check_call(['patch', '-p2', '-f'], stdin=f, cwd=pybind11_dir)
+            with open(marker, 'w') as f:
+                pass
+    subprocess.check_call([*build_cmd, '--build_wheel'])
+    wheels = list((build_dir / 'dist').glob('*.whl'))
+    assert len(wheels) == 1, f"Expected 1 wheel, found {len(wheels)}"
+    wheel = wheels[0]
+    shutil.copyfile(wheel, wheel_directory / wheel.name)
+    return str(wheel.name)
diff --git a/pyproject.toml b/pyproject.toml
index 97515cb..143790d 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,3 +1,8 @@
+[build-system]
+requires = ["setuptools >= 40.6.0", "wheel", "packaging", "numpy>=1.24.2"]
+build-backend = "onnxruntime_build_backend"
+backend-path = ["."]
+
 [tool.black]
 line-length = 120
 # NOTE: Do not extend the exclude list. Edit .lintrunner.toml instead
diff --git a/requirements.txt.in b/requirements.txt.in
index 8924206..a9c1327 100644
--- a/requirements.txt.in
+++ b/requirements.txt.in
@@ -1,6 +1,6 @@
 coloredlogs
 flatbuffers
-numpy >= @Python_NumPy_VERSION@
+numpy
 packaging
 protobuf
 sympy
diff --git a/tools/ci_build/build.py b/tools/ci_build/build.py
index 31f242c..300211b 100644
--- a/tools/ci_build/build.py
+++ b/tools/ci_build/build.py
@@ -1266,6 +1266,11 @@ def generate_build_tree(
             "-Ddml_EXTERNAL_PROJECT=ON",
         ]
 
+    if not args.test:
+        cmake_args += [
+            "-Donnxruntime_BUILD_UNIT_TESTS=OFF",
+        ]
+
     if args.use_gdk:
         cmake_args += [
             "-DCMAKE_TOOLCHAIN_FILE=" + os.path.join(source_dir, "cmake", "gdk_toolchain.cmake"),
