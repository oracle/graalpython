diff --git a/functorch/csrc/dim/dim.cpp b/functorch/csrc/dim/dim.cpp
index 21f0a166..ab2497c5 100644
--- a/functorch/csrc/dim/dim.cpp
+++ b/functorch/csrc/dim/dim.cpp
@@ -22,7 +22,10 @@ PyObject* Dim_init() {
 
 #include "minpybind.h"
 #include <frameobject.h>
+// GraalPy change
+#if 0 // GraalPy change
 #include <opcode.h>
+#endif // GraalPy change
 #include <utility>
 #include <new>
 #include <iostream>
@@ -37,11 +40,13 @@ PyObject* Dim_init() {
 #include "dim.h"
 #include "python_variable_simple.h"
 
+#if 0 // GraalPy change
 #if IS_PYTHON_3_11_PLUS
 #define Py_BUILD_CORE
 #include "internal/pycore_opcode.h"
 #undef Py_BUILD_CORE
 #endif
+#endif // GraalPy change
 
 // C++ API functions for objects to
 // * construct the object, returning a ref-counted handle
@@ -1468,6 +1473,7 @@ PyTypeObject Tensor::Type = {
 
 // dim() --------------------
 
+#if 0 // GraalPy change
 static bool relevant_op(_Py_CODEUNIT c) {
     switch(c) {
         case STORE_NAME:
@@ -1479,6 +1485,7 @@ static bool relevant_op(_Py_CODEUNIT c) {
             return false;
     }
 }
+#endif // GraalPy change
 
 static mpy::object create_dim(mpy::object name, mpy::handle size) {
     auto d = Dim::create(std::move(name));
@@ -1512,6 +1519,7 @@ static mpy::object create_dimlist(mpy::object name, mpy::handle size) {
 #endif
 
 namespace{
+#if 0 // GraalPy change
 struct PyInstDecoder {
     PyInstDecoder(PyCodeObject* code_object, int lasti)
     : code_object_(code_object), code_(_PyCode_CODE(code_object)), offset_(lasti / sizeof(_Py_CODEUNIT))  {}
@@ -1557,6 +1565,7 @@ private:
     _Py_CODEUNIT* code_;
     int offset_;
 };
+#endif // GraalPy change
 
 template<mpy::object (*create_object)(mpy::object, mpy::handle)>
 static PyObject* _dims(PyObject *self,
@@ -1582,6 +1591,7 @@ static PyObject* _dims(PyObject *self,
         }
     }
 
+#if 0 // GraalPy change
     PyThreadState* state = PyThreadState_GET();
     auto f = mpy::obj<PyFrameObject>::steal(PyThreadState_GetFrame(state));
     auto c = mpy::obj<PyCodeObject>::steal(PyFrame_GetCode(f.ptr()));
@@ -1602,10 +1612,12 @@ static PyObject* _dims(PyObject *self,
         found_ndims = decoder.oparg();
         decoder.next();
     }
+#endif // GraalPy change
 
     if (specified_ndims == -1) {
         if (found_ndims == 0) {
-            mpy::raise_error(PyExc_SyntaxError, "dims() must be assigned to a sequence of variable names or have argument n specified");
+            // GraalPy change
+            mpy::raise_error(PyExc_SyntaxError, "dims() without arguments doesn't work on GraalPy, use the explicit dims(number) form");
         }
         specified_ndims = found_ndims;
     }
@@ -1615,14 +1627,18 @@ static PyObject* _dims(PyObject *self,
 
     auto genobject = [&](int i) -> mpy::object {
         mpy::object name;
+#if 0 // GraalPy change
         if (i < found_ndims) {
             name = decoder.name();
         }
+#endif // GraalPy change
         if (!name.ptr()) {
             name = mpy::unicode_from_format("d%d", i);
             found_ndims = 0; // once we fail at finding a name, we can find any more
         } else {
+#if 0 // GraalPy change
             decoder.next();
+#endif // GraalPy change
         }
         return create_object(std::move(name), sizes != -1 ? mpy::sequence_view(py_sizes)[i] : mpy::handle(Py_None));
     };
@@ -2081,12 +2097,12 @@ struct IndexingInfo {
 IndexingInfo getsetitem_flat(Arena& A, TensorInfo self_info, Slice<mpy::handle> input, Slice<DimEntry> keys, Slice<mpy::handle> values, bool has_dimpacks_or_none);
 namespace{
 Slice<mpy::handle> as_slice(mpy::tuple_view tv) {
-    PyObject** begin = &PyTuple_GET_ITEM(tv.ptr(),0);
+    PyObject** begin = PySequence_Fast_ITEMS(tv.ptr());
     return Slice<mpy::handle>((mpy::handle*)begin, (mpy::handle*) (begin + tv.size()));
 }
 
 Slice<mpy::handle> as_slice(mpy::list_view tv) {
-    PyObject** begin = &PyList_GET_ITEM(tv.ptr(),0);
+    PyObject** begin = PySequence_Fast_ITEMS(tv.ptr());
     return Slice<mpy::handle>((mpy::handle*)begin, (mpy::handle*) (begin + tv.size()));
 }
 
diff --git a/pyproject.toml b/pyproject.toml
index ffbf640d..114051f9 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -3,7 +3,7 @@ requires = [
     "setuptools",
     "wheel",
     "astunparse",
-    "numpy",
+    "numpy<2",
     "ninja",
     "pyyaml",
     "cmake",
diff --git a/test/test_overrides.py b/test/test_overrides.py
index f9988197..cde6b114 100644
--- a/test/test_overrides.py
+++ b/test/test_overrides.py
@@ -1499,12 +1499,9 @@ class TestTorchFunctionMode(TestCase):
             pass
 
         x = A(torch.randn(5))
-        with torch._C.DisableTorchFunctionSubclass():
-            g = torch._C._EnableTorchFunction()
-            try:
+        with torch._C.DisableTorchFunctionSubclass(), \
+            torch._C._EnableTorchFunction():
                 self.assertIsInstance(torch.sum(x), A)
-            finally:
-                del g
 
     def test_subclass_hash(self):
         class DiagTensor(torch.Tensor):
diff --git a/test/test_python_dispatch.py b/test/test_python_dispatch.py
index 6e358034..0edf7770 100644
--- a/test/test_python_dispatch.py
+++ b/test/test_python_dispatch.py
@@ -2196,16 +2196,16 @@ def forward(self, x_1):
 class TestPythonDispatcher(TestCase):
     def test_basic(self):
         x = torch.randn(2, requires_grad=True)
-        r = torch._C._EnablePythonDispatcher()
-        torch.add(x, x)
+        with torch._C._EnablePythonDispatcher():
+            torch.add(x, x)
 
     def test_lstsq(self):
         a = torch.randn(4, 3)
         b = torch.rand(4, 3)
         expected_shape = torch.linalg.lstsq(a, b).solution.shape
-        r = torch._C._EnablePythonDispatcher()
-        python_disp_shape = torch.linalg.lstsq(a, b).solution.shape
-        self.assertEqual(expected_shape, python_disp_shape)
+        with torch._C._EnablePythonDispatcher():
+            python_disp_shape = torch.linalg.lstsq(a, b).solution.shape
+            self.assertEqual(expected_shape, python_disp_shape)
 
 class TestWrapperSubclassAliasing(TestCase):
 
diff --git a/third_party/pybind11/include/pybind11/detail/common.h b/third_party/pybind11/include/pybind11/detail/common.h
index 31a54c77..aafeb9c8 100644
--- a/third_party/pybind11/include/pybind11/detail/common.h
+++ b/third_party/pybind11/include/pybind11/detail/common.h
@@ -288,7 +288,7 @@ PYBIND11_WARNING_DISABLE_MSVC(4505)
 #    undef copysign
 #endif
 
-#if defined(PYPY_VERSION) && !defined(PYBIND11_SIMPLE_GIL_MANAGEMENT)
+#if (defined(PYPY_VERSION) || defined(GRAALVM_PYTHON)) && !defined(PYBIND11_SIMPLE_GIL_MANAGEMENT)
 #    define PYBIND11_SIMPLE_GIL_MANAGEMENT
 #endif
 
diff --git a/third_party/pybind11/include/pybind11/detail/type_caster_base.h b/third_party/pybind11/include/pybind11/detail/type_caster_base.h
index 16387506..53e20b48 100644
--- a/third_party/pybind11/include/pybind11/detail/type_caster_base.h
+++ b/third_party/pybind11/include/pybind11/detail/type_caster_base.h
@@ -484,7 +484,7 @@ PYBIND11_NOINLINE handle get_object_handle(const void *ptr, const detail::type_i
 }
 
 inline PyThreadState *get_thread_state_unchecked() {
-#if defined(PYPY_VERSION)
+#if defined(PYPY_VERSION) || defined(GRAALVM_PYTHON)
     return PyThreadState_GET();
 #else
     return _PyThreadState_UncheckedGet();
diff --git a/third_party/pybind11/include/pybind11/eval.h b/third_party/pybind11/include/pybind11/eval.h
index bd5f981f..c25f036b 100644
--- a/third_party/pybind11/include/pybind11/eval.h
+++ b/third_party/pybind11/include/pybind11/eval.h
@@ -94,7 +94,7 @@ void exec(const char (&s)[N], object global = globals(), object local = object()
     eval<eval_statements>(s, std::move(global), std::move(local));
 }
 
-#if defined(PYPY_VERSION)
+#if defined(PYPY_VERSION) || defined(GRAALVM_PYTHON)
 template <eval_mode mode = eval_statements>
 object eval_file(str, object, object) {
     pybind11_fail("eval_file not supported in PyPy3. Use eval");
diff --git a/third_party/pybind11/include/pybind11/pybind11.h b/third_party/pybind11/include/pybind11/pybind11.h
index 818115cc..b4b3bf93 100644
--- a/third_party/pybind11/include/pybind11/pybind11.h
+++ b/third_party/pybind11/include/pybind11/pybind11.h
@@ -551,7 +551,7 @@ protected:
                 chain_start = rec;
                 rec->next = chain;
                 auto rec_capsule
-                    = reinterpret_borrow<capsule>(((PyCFunctionObject *) m_ptr)->m_self);
+                    = reinterpret_borrow<capsule>(PyCFunction_GetSelf(m_ptr));
                 rec_capsule.set_pointer(unique_rec.release());
                 guarded_strdup.release();
             } else {
@@ -2693,7 +2693,7 @@ get_type_override(const void *this_ptr, const type_info *this_type, const char *
 
     /* Don't call dispatch code if invoked from overridden function.
        Unfortunately this doesn't work on PyPy. */
-#if !defined(PYPY_VERSION)
+#if !defined(PYPY_VERSION) && !defined(GRAALVM_PYTHON)
 #    if PY_VERSION_HEX >= 0x03090000
     PyFrameObject *frame = PyThreadState_GetFrame(PyThreadState_Get());
     if (frame != nullptr) {
diff --git a/third_party/pybind11/include/pybind11/pytypes.h b/third_party/pybind11/include/pybind11/pytypes.h
index 68fd53d0..2871915e 100644
--- a/third_party/pybind11/include/pybind11/pytypes.h
+++ b/third_party/pybind11/include/pybind11/pytypes.h
@@ -626,7 +626,7 @@ struct error_fetch_and_normalize {
 
         bool have_trace = false;
         if (m_trace) {
-#if !defined(PYPY_VERSION)
+#if !defined(PYPY_VERSION) && !defined(GRAALVM_PYTHON)
             auto *tb = reinterpret_cast<PyTracebackObject *>(m_trace.ptr());
 
             // Get the deepest trace possible.
diff --git a/tools/generate_torch_version.py b/tools/generate_torch_version.py
index 93689693..81e360dc 100644
--- a/tools/generate_torch_version.py
+++ b/tools/generate_torch_version.py
@@ -40,6 +40,7 @@ def get_tag(pytorch_root: Union[str, Path]) -> str:
 
 
 def get_torch_version(sha: Optional[str] = None) -> str:
+    return '2.2.1'
     pytorch_root = Path(__file__).parent.parent
     version = open(pytorch_root / "version.txt").read().strip()
 
diff --git a/torch/_dynamo/types.py b/torch/_dynamo/types.py
index 0c1deddd..f60e9d72 100644
--- a/torch/_dynamo/types.py
+++ b/torch/_dynamo/types.py
@@ -6,7 +6,7 @@ from typing import Any, Callable, Dict, List, NamedTuple, Optional, Protocol, Un
 from typing_extensions import TypeAlias
 
 
-if sys.version_info >= (3, 11):
+if sys.version_info >= (3, 11) and not sys.implementation.name == 'graalpy':
     from torch._C._dynamo import eval_frame
 
     DynamoFrameType: TypeAlias = eval_frame._PyInterpreterFrame
diff --git a/torch/_tensor_str.py b/torch/_tensor_str.py
index 1293a0fd..dfb4385a 100644
--- a/torch/_tensor_str.py
+++ b/torch/_tensor_str.py
@@ -672,6 +672,6 @@ def _functorch_wrapper_str_intern(tensor, *, tensor_contents=None):
 
 
 def _str(self, *, tensor_contents=None):
-    with torch.no_grad(), torch.utils._python_dispatch._disable_current_modes():
-        guard = torch._C._DisableFuncTorch()
+    with torch.no_grad(), torch.utils._python_dispatch._disable_current_modes(), \
+            torch._C._DisableFuncTorch():
         return _str_intern(self, tensor_contents=tensor_contents)
diff --git a/torch/csrc/Module.cpp b/torch/csrc/Module.cpp
index bbf99ce4..0168b101 100644
--- a/torch/csrc/Module.cpp
+++ b/torch/csrc/Module.cpp
@@ -341,46 +341,16 @@ PyObject* THPModule_addDocStr(PyObject* _unused, PyObject* args) {
     doc_str = all_docs.back().c_str();
   }
 
-  if (Py_TYPE(obj) == &PyCFunction_Type) {
-    PyCFunctionObject* f = (PyCFunctionObject*)obj;
-    if (GraalPyCFunction_GetDoc((PyObject*)(f))) {
-      return PyErr_Format(
-          PyExc_RuntimeError,
-          "function '%s' already has a docstring",
-          GraalPyCFunction_GetMethodDef((PyObject*)(f))->ml_name);
-    }
-    GraalPyCFunction_SetDoc((PyObject*)(f), doc_str);
-  } else if (strcmp(Py_TYPE(obj)->tp_name, "method_descriptor") == 0) {
-    PyMethodDescrObject* m = (PyMethodDescrObject*)obj;
-    if (m->d_method->ml_doc) {
-      return PyErr_Format(
-          PyExc_RuntimeError,
-          "method '%s' already has a docstring",
-          m->d_method->ml_name);
-    }
-    m->d_method->ml_doc = doc_str;
-  } else if (strcmp(Py_TYPE(obj)->tp_name, "getset_descriptor") == 0) {
-    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-cstyle-cast)
-    PyGetSetDescrObject* m = (PyGetSetDescrObject*)obj;
-    if (m->d_getset->doc) {
-      return PyErr_Format(
-          PyExc_RuntimeError,
-          "attribute '%s' already has a docstring",
-          m->d_getset->name);
-    }
-    m->d_getset->doc = doc_str;
-  } else if (Py_TYPE(obj) == &PyType_Type) {
-    PyTypeObject* t = (PyTypeObject*)obj;
-    if (t->tp_doc) {
-      return PyErr_Format(
-          PyExc_RuntimeError, "Type '%s' already has a docstring", t->tp_name);
-    }
-    t->tp_doc = doc_str;
-  } else {
+  // GraalPy change
+  if (PyObject_GetDoc(obj)) {
     return PyErr_Format(
-        PyExc_TypeError,
-        "don't know how to add docstring to type '%s'",
-        Py_TYPE(obj)->tp_name);
+        PyExc_RuntimeError,
+        "object '%100R' already has a docstring",
+        obj);
+  }
+  // GraalPy change
+  if (PyObject_SetDoc(obj, doc_str) < 0) {
+      return NULL;
   }
 
   Py_INCREF(obj);
diff --git a/torch/csrc/autograd/python_variable_indexing.cpp b/torch/csrc/autograd/python_variable_indexing.cpp
index 3b128027..b670f3f2 100644
--- a/torch/csrc/autograd/python_variable_indexing.cpp
+++ b/torch/csrc/autograd/python_variable_indexing.cpp
@@ -145,25 +145,28 @@ inline Variable valueToTensor(
 
 static inline void recordSliceTrace(PyObject* obj) {
   PySliceObject* sliceobj = (PySliceObject*)obj;
-  if (THPVariable_Check(sliceobj->start)) {
+  PyObject* slicestart = PySlice_Start(sliceobj);
+  if (THPVariable_Check(slicestart)) {
     torch::jit::tracer::ArgumentStash::stashValue(
         std::string("start"),
         1,
-        THPVariable_Unpack(sliceobj->start),
+        THPVariable_Unpack(slicestart),
         torch::jit::IntType::get());
   }
-  if (THPVariable_Check(sliceobj->stop)) {
+  PyObject* slicestop = PySlice_Stop(sliceobj);
+  if (THPVariable_Check(slicestop)) {
     torch::jit::tracer::ArgumentStash::stashValue(
         std::string("end"),
         1,
-        THPVariable_Unpack(sliceobj->stop),
+        THPVariable_Unpack(slicestop),
         torch::jit::IntType::get());
   }
-  if (THPVariable_Check(sliceobj->step)) {
+  PyObject* slicestep = PySlice_Step(sliceobj);
+  if (THPVariable_Check(slicestep)) {
     torch::jit::tracer::ArgumentStash::stashValue(
         std::string("step"),
         1,
-        THPVariable_Unpack(sliceobj->step),
+        THPVariable_Unpack(slicestep),
         torch::jit::IntType::get());
   }
 }
diff --git a/torch/csrc/autograd/python_variable_indexing.h b/torch/csrc/autograd/python_variable_indexing.h
index 688ea19b..5c9c1ecb 100644
--- a/torch/csrc/autograd/python_variable_indexing.h
+++ b/torch/csrc/autograd/python_variable_indexing.h
@@ -38,15 +38,16 @@ static inline UnpackedSlice __PySlice_Unpack(PyObject* _r) {
     return val;
   };
 
-  if (r->step == Py_None) {
+  PyObject* stepObj = PySlice_Step(r);
+  if (stepObj == Py_None) {
     step_sym = c10::SymInt(1);
   } else {
-    if (torch::is_symint(r->step)) {
-      auto step_sym = py::handle(r->step).cast<c10::SymInt>();
+    if (torch::is_symint(stepObj)) {
+      auto step_sym = py::handle(stepObj).cast<c10::SymInt>();
     } else {
       // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
       Py_ssize_t step;
-      if (!_PyEval_SliceIndex(r->step, &step)) {
+      if (!_PyEval_SliceIndex(stepObj, &step)) {
         throw python_error();
       }
       if (step == 0) {
@@ -58,29 +59,31 @@ static inline UnpackedSlice __PySlice_Unpack(PyObject* _r) {
     }
   }
 
-  if (torch::is_symint(r->start)) {
-    start_sym = py::handle(r->start).cast<c10::SymInt>();
-  } else if (r->start == Py_None) {
+  PyObject* startObj = PySlice_Start(r);
+  if (torch::is_symint(startObj)) {
+    start_sym = py::handle(startObj).cast<c10::SymInt>();
+  } else if (startObj == Py_None) {
     start_sym = c10::SymInt(step_sym < 0 ? PY_SSIZE_T_MAX : 0);
   } else {
     // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     Py_ssize_t start;
-    if (!_PyEval_SliceIndex(r->start, &start)) {
+    if (!_PyEval_SliceIndex(startObj, &start)) {
       throw python_error();
     }
     start = clip_val(start);
     start_sym = c10::SymInt(start);
   }
 
-  if (torch::is_symint(r->stop)) {
-    stop_sym = py::handle(r->stop).cast<c10::SymInt>();
-  } else if (r->stop == Py_None) {
+  PyObject* stopObj = PySlice_Stop(r);
+  if (torch::is_symint(stopObj)) {
+    stop_sym = py::handle(stopObj).cast<c10::SymInt>();
+  } else if (stopObj == Py_None) {
     stop_sym = c10::SymInt(
         step_sym < 0 ? c10::SymInt::min_representable_int() : PY_SSIZE_T_MAX);
   } else {
     // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     Py_ssize_t stop;
-    if (!_PyEval_SliceIndex(r->stop, &stop)) {
+    if (!_PyEval_SliceIndex(stopObj, &stop)) {
       throw python_error();
     }
     stop = clip_val(stop);
diff --git a/torch/csrc/dynamo/cpython_defs.c b/torch/csrc/dynamo/cpython_defs.c
index 5d249d99..9f83824e 100644
--- a/torch/csrc/dynamo/cpython_defs.c
+++ b/torch/csrc/dynamo/cpython_defs.c
@@ -24,6 +24,7 @@
 #undef _PyGC_FINALIZED
 #endif
 
+#if 0 // GraalPy change
 #define Py_BUILD_CORE
 #include <internal/pycore_pystate.h>
 #define NEED_OPCODE_TABLES // To get _PyOpcode_Deopt
@@ -31,6 +32,7 @@
 #undef NEED_OPCODE_TABLES
 #undef Py_BUILD_CORE
 #include <internal/pycore_frame.h>
+#endif // GraalPy change
 
 // As a simple way to reduce the impact of ABI changes on the CPython side, this check forces
 // us to manually re-check that the function didn't change on the next major version
@@ -39,6 +41,7 @@
 // #error "Please ensure that the functions below still match the CPython implementation for 3.12"
 #endif
 
+#if 0 // GraalPy change
 // https://github.com/python/cpython/blob/a7715ccfba5b86ab09f86ec56ac3755c93b46b48/Objects/frameobject.c#L1079
 static int
 THP_PyFrame_OpAlreadyRan(_PyInterpreterFrame *frame, int opcode, int oparg)
@@ -64,10 +67,15 @@ THP_PyFrame_OpAlreadyRan(_PyInterpreterFrame *frame, int opcode, int oparg)
     }
     return 0;
 }
+#endif
 
 // https://github.com/python/cpython/blob/a7715ccfba5b86ab09f86ec56ac3755c93b46b48/Objects/frameobject.c#L1182
 int
 THP_PyFrame_FastToLocalsWithError(_PyInterpreterFrame *frame) {
+    // GraalPy change
+    PyErr_SetString(PyExc_NotImplementedError, "dynamo compilation is not supported on GraalPy");
+    return -1;
+#if 0
     /* Merge fast locals into f->f_locals */
     PyObject *locals = NULL;
     PyObject **fast = NULL;
@@ -162,6 +170,7 @@ THP_PyFrame_FastToLocalsWithError(_PyInterpreterFrame *frame) {
         }
     }
     return 0;
+#endif
 }
 
 // e.g. COPY_FIELD(op, o, globals) becomes
@@ -328,6 +337,7 @@ THP_take_ownership(PyFrameObject *f, _PyInterpreterFrame *frame)
 void
 THP_PyFrame_Clear(_PyInterpreterFrame *frame)
 {
+#if 0 // GraalPy change
     /* It is the responsibility of the owning generator/coroutine
      * to have cleared the enclosing generator, if any. */
     CHECK(frame->owner != FRAME_OWNED_BY_GENERATOR ||
@@ -357,6 +367,7 @@ THP_PyFrame_Clear(_PyInterpreterFrame *frame)
     Py_DECREF(frame->f_func);
     #endif
     Py_DECREF(frame->f_code);
+#endif // GraalPy change
 }
 
 #endif
diff --git a/torch/csrc/dynamo/eval_frame.c b/torch/csrc/dynamo/eval_frame.c
index 0245b192..22e58dd5 100644
--- a/torch/csrc/dynamo/eval_frame.c
+++ b/torch/csrc/dynamo/eval_frame.c
@@ -1,8 +1,8 @@
 #define PY_SSIZE_T_CLEAN
 #include <torch/csrc/dynamo/cpp_shim.h>
-#include <torch/csrc/dynamo/cpython_defs.h>
+//#include <torch/csrc/dynamo/cpython_defs.h>
 #include <torch/csrc/utils/python_compat.h>
-#include <opcode.h>
+//#include <opcode.h>
 #include <stdbool.h>
 
 // Problem in CPython includes when mixing core and non-core build
@@ -12,6 +12,7 @@
 #undef _PyGC_FINALIZED
 #endif
 
+#if 0
 // see https://bugs.python.org/issue35886
 #if PY_VERSION_HEX >= 0x03080000
 #define Py_BUILD_CORE
@@ -131,6 +132,7 @@ THPPyInterpreterFrame* THPPyInterpreterFrame_New(_PyInterpreterFrame* frame) {
 
 #define THP_PyFrame_FastToLocalsWithError PyFrame_FastToLocalsWithError
 #endif
+#endif
 
 #ifdef _WIN32
 #define unlikely(x) (x)
@@ -199,6 +201,7 @@ inline static void eval_frame_callback_set(PyObject* obj) {
   PyThread_tss_set(&eval_frame_callback_key, obj);
 }
 
+#if 0
 static PyObject* _custom_eval_frame_shim(
     PyThreadState* tstate,
     THP_EVAL_API_FRAME_OBJECT* frame,
@@ -284,6 +287,7 @@ inline static const char* get_frame_name(THP_EVAL_API_FRAME_OBJECT* frame) {
   DEBUG_CHECK(PyUnicode_Check(frame->f_code->co_name));
   return PyUnicode_AsUTF8(frame->f_code->co_name);
 }
+#endif
 
 typedef PyObject FrameState;
 /*
@@ -602,6 +606,7 @@ PyObject* _debug_get_cache_entry_list(PyObject* self, PyObject* args) {
   return (PyObject*)current_node;
 }
 
+#if 0
 static inline PyObject* call_callback(
     PyObject* callable,
     THP_EVAL_API_FRAME_OBJECT* _frame,
@@ -644,7 +649,6 @@ static PyObject* call_guard_fail_hook(
       (Py_ssize_t)index,
       (e->next == (CacheEntry*)Py_None ? Py_True : Py_False));
 }
-
 // Return value: borrowed reference
 // Is either Py_None or a PyCodeObject
 static PyObject* lookup(CacheEntry* e, THP_EVAL_API_FRAME_OBJECT *frame, CacheEntry* prev, size_t index) {
@@ -1033,6 +1037,7 @@ static PyObject* decrement_working_threads(PyThreadState* tstate) {
   }
   Py_RETURN_NONE;
 }
+#endif
 
 static PyObject* set_eval_frame(PyObject* new_callback, PyThreadState* tstate) {
   // Change the eval frame callback and return the old one
@@ -1045,9 +1050,13 @@ static PyObject* set_eval_frame(PyObject* new_callback, PyThreadState* tstate) {
   Py_INCREF(old_callback);
 
   if (old_callback != Py_None && new_callback == Py_None) {
-    decrement_working_threads(tstate);
+    // GraalPy change
+    PyErr_SetString(PyExc_NotImplementedError, "dynamo compilation is not supported on GraalPy");
+    return NULL;
   } else if (old_callback == Py_None && new_callback != Py_None) {
-    increment_working_threads(tstate);
+    // GraalPy change
+    PyErr_SetString(PyExc_NotImplementedError, "dynamo compilation is not supported on GraalPy");
+    return NULL;
   }
 
   Py_INCREF(new_callback);
@@ -1135,12 +1144,14 @@ static struct PyModuleDef _module = {
 
 
 PyObject* torch_c_dynamo_eval_frame_init(void) {
+#if 0
   extra_index = _PyEval_RequestCodeExtraIndex(destroy_extra_state);
   if (extra_index < 0) {
     PyErr_SetString(PyExc_RuntimeError,
                     "dynamo: unable to register extra index");
     return NULL;
   }
+#endif
 
   int result = PyThread_tss_create(&eval_frame_callback_key);
   CHECK(result == 0);
@@ -1153,6 +1164,7 @@ PyObject* torch_c_dynamo_eval_frame_init(void) {
     return NULL;
   }
 
+#if 0
 #if IS_PYTHON_3_11_PLUS
   if (PyType_Ready(&THPPyInterpreterFrameType) < 0) {
     return NULL;
@@ -1162,6 +1174,7 @@ PyObject* torch_c_dynamo_eval_frame_init(void) {
     return NULL;
   }
 #endif
+#endif
 
 
   if (PyType_Ready(&CacheEntryType) < 0) {
diff --git a/torch/csrc/jit/python/python_tracer.cpp b/torch/csrc/jit/python/python_tracer.cpp
index bdc62d33..e16c3715 100644
--- a/torch/csrc/jit/python/python_tracer.cpp
+++ b/torch/csrc/jit/python/python_tracer.cpp
@@ -31,11 +31,15 @@ std::vector<StackEntry> _pythonCallstack() {
   while (nullptr != frame) {
     auto code = THPCodeObjectPtr(PyFrame_GetCode(frame));
     size_t line = PyCode_Addr2Line(code.get(), PyFrame_GetLasti(frame));
-    std::string filename = THPUtils_unpackString(code->co_filename);
-    std::string funcname = THPUtils_unpackString(code->co_name);
+    PyObject* filenameObj = GraalPyCode_GetFileName(code);
+    std::string filename = THPUtils_unpackString(filenameObj);
+    PyObject* funcnameObj = GraalPyCode_GetName(code);
+    std::string funcname = THPUtils_unpackString(funcnameObj);
     auto source = std::make_shared<Source>(funcname, filename, line);
     entries.emplace_back(
         StackEntry{funcname, SourceRange(source, 0, funcname.size())});
+    Py_DECREF(funcnameObj);
+    Py_DECREF(filenameObj);
     auto new_frame = PyFrame_GetBack(frame);
     Py_DECREF(frame);
     frame = new_frame;
